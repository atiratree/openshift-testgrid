package main

import (
	"bufio"
	"flag"
	"fmt"
	"os"
	"os/exec"
	"strings"
	"testgrid/internal"
)

func main() {
	input := flag.String("input", "", "input TSV file")
	output := flag.String("output", "", "output file")
	flag.Parse()

	if *input == "" {
		fmt.Fprintf(os.Stderr, "Input file is required\n")
		flag.PrintDefaults()
		os.Exit(1)
	}

	if *output == "" {
		fmt.Fprintf(os.Stderr, "Output file is required\n")
		flag.PrintDefaults()
		os.Exit(1)
	}

	data, err := readTSVFile(*input)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to read TSF file %s: %v\n", *input, err)
		os.Exit(1)
	}

	err = generateGoFile(*output, data)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to generate .go file %s: %v\n", *output, err)
		os.Exit(1)
	}

	fmt.Printf("Go file generated: %s\n", *output)
}

func readTSVFile(filename string) (map[string]internal.Variant, error) {
	file, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	data := make(map[string]internal.Variant)

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		fields := strings.Split(line, "\t")
		if len(fields) != 3 {
			return nil, fmt.Errorf("invalid TSV format")
		}

		job := fields[0]
		variants := fields[1]
		extendedVariants := fields[2]

		v := internal.Variant{
			Name:                variants,
			Parallel:            strings.Contains(extendedVariants, "parallel"),
			CSI:                 strings.Contains(extendedVariants, "csi"),
			UpgradeFromPrevious: strings.Contains(extendedVariants, "upgrade"),
			Serial:              strings.Contains(extendedVariants, "serial"),
		}

		data[job] = v
	}

	if err := scanner.Err(); err != nil {
		return nil, err
	}

	return data, nil
}

func generateGoFile(filename string, data map[string]internal.Variant) error {
	defer func() {
		if _, err := exec.Command("gofmt", "-s", "-w", filename).Output(); err != nil {
			fmt.Fprintf(os.Stderr, "error: %v", err)
			os.Exit(1)
		}
	}()

	file, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer file.Close()

	header := `
package generated

import "testgrid/internal"

// This file is generated by go generate. DO NOT EDIT.

var Variants = map[string]internal.Variant{
`

	footer := `
}
`

	_, err = file.WriteString(header)
	if err != nil {
		return err
	}

	for job, v := range data {
		line := fmt.Sprintf("\"%s\": {Name: \"%s\", Parallel: %v, CSI: %v, UpgradeFromPrevious: %v, Serial: %v},\n", job, v.Name, v.Parallel, v.CSI, v.UpgradeFromPrevious, v.Serial)
		_, err := file.WriteString(line)
		if err != nil {
			return err
		}
	}

	_, err = file.WriteString(footer)

	return err
}
